name: Build Void Live ISO via chroot (no Docker container, no mklive.sh patch)

on:
  workflow_dispatch:
    inputs:
      arch:
        description: "目标架构 (x86_64 / x86_64-musl / aarch64 …)"
        default: "x86_64"
        required: true
        type: string
      datecode:
        description: "日期码 (YYYYMMDD，留空则自动取今天 UTC)"
        required: false
        type: string
      extra_packages:
        description: "自选额外包 (空格分隔，留空则只安装 base-system、runit、squashfs-tools、kmod)"
        default: "xfce4 xfce4-terminal network-manager-applet dbus-elogind"
        required: false
        type: string
      extra_services:
        description: "自选要启用的 runit 服务 (空格分隔，可留空)"
        default: ""
        required: false
        type: string

jobs:
  build-iso:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      # ─────────────────────────────────────────────────────────────
      # 1) Checkout 仓库，确保包含 mklive.sh、Makefile、mkiso.sh 等
      # ─────────────────────────────────────────────────────────────
      - name: Checkout repository
        uses: actions/checkout@v4

      # ─────────────────────────────────────────────────────────────
      # 2) 在宿主 Ubuntu 上安装 mklive.sh 所需的所有外部工具，
      #    但不安装 dracut（避免触发 Ubuntu 自己的 initramfs 更新）。
      #    安装：curl、tar、xz-utils、bubblewrap、squashfs-tools、kmod、
      #          grub2-common、grub-pc-bin、grub-efi-amd64-bin、
      #          genisoimage、mtools、make、gettext、file、gnupg、bash-completion
      # ─────────────────────────────────────────────────────────────
      - name: Install host packages (no dracut)
        run: |
          set -euxo pipefail

          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
            ca-certificates \
            curl \
            xz-utils \
            tar \
            bubblewrap \
            squashfs-tools \
            kmod \
            grub2-common \
            grub-pc-bin \
            grub-efi-amd64-bin \
            genisoimage \
            mtools \
            make \
            gettext \
            file \
            gnupg \
            bash-completion

          sudo rm -rf /var/lib/apt/lists/*

          # ── 下载并解压 xbps-static（musl 版）到 /opt/xbps
          sudo mkdir -p /opt/xbps
          curl -L https://repo-default.voidlinux.org/static/xbps-static-latest.x86_64-musl.tar.xz \
            | sudo tar -xJ -C /opt/xbps
          sudo chmod -R a+rx /opt/xbps

          # 链接 xbps-static 可执行程序到 /usr/local/bin
          for tool in xbps-install.static xbps-query.static xbps-rindex.static xbps-uhelper.static xbps-uchroot.static xbps-uunshare.static; do
            sudo ln -sf /opt/xbps/usr/bin/$tool /usr/local/bin/${tool%.static}
          done

      # ─────────────────────────────────────────────────────────────
      # 3) 定义一个干净的 “Void 根文件系统” 目录 $VOID_ROOT，
      #    并预先创建 mklive.sh 会用到的子目录：
      #      • /var/tmp
      #      • /etc/modules-load.d
      #      • /etc/runit/runsvdir/default
      #
      #    同时把仓库内容复制到 $VOID_ROOT/tmp/mklive-src
      #    （用 tar --exclude 排除掉 void-root 本身，避免自复制）。
      # ─────────────────────────────────────────────────────────────
      - name: Prepare chroot rootfs directory
        run: |
          set -euxo pipefail

          # 定义 Void 根文件系统挂载点
          export VOID_ROOT="${GITHUB_WORKSPACE}/void-root"

          # 清理、重建它
          sudo rm -rf "$VOID_ROOT"
          mkdir -p "$VOID_ROOT"

          # 提前创建 mklive.sh 需要的目录
          mkdir -p "$VOID_ROOT/var/tmp"
          mkdir -p "$VOID_ROOT/etc/modules-load.d"
          mkdir -p "$VOID_ROOT/etc/runit/runsvdir/default"

          # 在 chroot 里创建 /tmp/mklive-src 目录
          mkdir -p "$VOID_ROOT/tmp/mklive-src"

          # 用 tar 排除出 void-root，复制其他所有文件到 chroot 的 /tmp/mklive-src
          tar --exclude="./void-root" -cf - . | (cd "$VOID_ROOT/tmp/mklive-src" && tar -xf -)

          # 确保当前用户有写权限，以便后面 xbps-install 能正常执行
          sudo chown -R $USER:$USER "$VOID_ROOT"

      # ─────────────────────────────────────────────────────────────
      # 4) 用 xbps-install 把 “官方二进制包” 安装到 $VOID_ROOT：
      #
      #    安装包列表：base-system、runit、squashfs-tools、kmod + 输入的 extra_packages
      #    命令示例：
      #      sudo xbps-install -S -R <repo> -r "$VOID_ROOT" -y base-system runit squashfs-tools kmod <extra_packages>
      # ─────────────────────────────────────────────────────────────
      - name: Install Void base-system into chroot
        run: |
          set -euxo pipefail

          # 必须在这一步里重新定义 VOID_ROOT
          export VOID_ROOT="${GITHUB_WORKSPACE}/void-root"

          ARCH="${{ inputs.arch }}"
          EXTRA_PKGS="${{ inputs.extra_packages }}"

          PKG_LIST="base-system runit squashfs-tools kmod"
          if [ -n "$EXTRA_PKGS" ]; then
            PKG_LIST="$PKG_LIST $EXTRA_PKGS"
          fi

          # 安装到 $VOID_ROOT
          sudo xbps-install -S \
            -R https://repo-default.voidlinux.org/current \
            -r "$VOID_ROOT" \
            -y $PKG_LIST

      # ─────────────────────────────────────────────────────────────
      # 5) 在 chroot 里创建一些 runit 所需的符号链接（保险操作）
      # ─────────────────────────────────────────────────────────────
      - name: Fix runit links in chroot
        run: |
          set -euxo pipefail

          # 也要重新定义 VOID_ROOT
          export VOID_ROOT="${GITHUB_WORKSPACE}/void-root"

          sudo ln -sf /usr/bin/runsvdir "$VOID_ROOT/usr/bin/runsvdir" || true
          sudo ln -sf /usr/bin/sv       "$VOID_ROOT/usr/bin/sv"       || true
          sudo ln -sf /usr/bin/chpst    "$VOID_ROOT/usr/bin/chpst"    || true

      # ─────────────────────────────────────────────────────────────
      # 6) 把宿主的 /proc /sys /dev /run Bind 到 chroot，
      #    并在 chroot 内部运行 mklive.sh。
      # ─────────────────────────────────────────────────────────────
      - name: Run mklive.sh inside chroot
        run: |
          set -euxo pipefail

          ARCH="${{ inputs.arch }}"
          EXTRA_SVCS="${{ inputs.extra_services }}"

          # 计算 DATECODE（留空则今天 UTC）
          if [ -z "${{ inputs.datecode }}" ]; then
            DATECODE="$(date -u +%Y%m%d)"
          else
            DATECODE="${{ inputs.datecode }}"
          fi

          export VOID_ROOT="${GITHUB_WORKSPACE}/void-root"

          # Bind-mount /proc /sys /dev /run 到 chroot
          sudo mount --bind /proc "$VOID_ROOT/proc"
          sudo mount --bind /sys  "$VOID_ROOT/sys"
          sudo mount --bind /dev  "$VOID_ROOT/dev"
          sudo mount --bind /run  "$VOID_ROOT/run"

          # 再次将最新的仓库内容同步到 chroot /tmp/mklive-src
          sudo rm -rf "$VOID_ROOT/tmp/mklive-src"
          sudo mkdir -p "$VOID_ROOT/tmp/mklive-src"
          tar --exclude="./void-root" -cf - . | (cd "$VOID_ROOT/tmp/mklive-src" && sudo tar -xf -)

          # 在 chroot 内运行 mklive.sh
          sudo chroot "$VOID_ROOT" /usr/bin/env -i \
            HOME=/root \
            USER=root \
            TERM="$TERM" \
            PATH="/usr/local/bin:/usr/bin:/bin" \
            /bin/bash -euxo pipefail -c '
              cd /tmp/mklive-src

              # 确保 mklive.sh 可执行
              chmod +x ./mklive.sh

              # 构造包列表
              PKG_STR="base-system runit squashfs-tools kmod"
              if [ -n '"'"'$EXTRA_PKGS'"'"' ]; then
                PKG_STR="$PKG_STR '"'"'$EXTRA_PKGS'"'"'"
              fi

              # 构造 runit 服务参数
              if [ -n '"'"'$EXTRA_SVCS'"'"' ]; then
                SVC_ARG="-S '"'"'$EXTRA_SVCS'"'"'"
              else
                SVC_ARG=""
              fi

              # 真正调用 mklive.sh 生成 ISO
              ./mklive.sh \
                -a '"'"'$ARCH'"'"' \
                -r https://repo-default.voidlinux.org/current \
                -p "$PKG_STR" \
                $SVC_ARG \
                -o /tmp/void-'"'"'$ARCH'"'"'-'"'"'$DATECODE'"'"'.iso
            '

          # 卸载 bind mount
          sudo umount "$VOID_ROOT/run"
          sudo umount "$VOID_ROOT/dev"
          sudo umount "$VOID_ROOT/sys"
          sudo umount "$VOID_ROOT/proc"

          # 把 chroot 下生成的 ISO 拷贝回工作区
          sudo cp "$VOID_ROOT/tmp/void-$ARCH-$DATECODE.iso" "$GITHUB_WORKSPACE/void-$ARCH-$DATECODE.iso"
          sudo chown $USER:$USER "$GITHUB_WORKSPACE/void-$ARCH-$DATECODE.iso"

      # ─────────────────────────────────────────────────────────────
      # 7) 上传最终生成的 ISO 作为 artifact
      # ─────────────────────────────────────────────────────────────
      - name: Upload generated ISO
        uses: actions/upload-artifact@v4
        with:
          name: void-${{ inputs.arch }}-iso
          path: void-*.iso
