name: Build Void Live ISO from Official Repo

on:
  workflow_dispatch:
    inputs:
      arch:
        description: "目标架构 (x86_64 / x86_64-musl / aarch64 …)"
        default: "x86_64"
        required: true
        type: string
      datecode:
        description: "日期码 (YYYYMMDD，若留空则自动取今天 UTC)"
        required: false
        type: string
      extra_packages:
        description: "自选额外包 (空格分隔，可留空)"
        default: "xfce4 xfce4-terminal network-manager-applet dbus-elogind"
        required: false
        type: string
      extra_services:
        description: "自选要启用的 runit 服务 (空格分隔，可留空)"
        default: ""
        required: false
        type: string

jobs:
  build-iso:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      # ──────────────────────────────────────────────────────────────
      # 1) Checkout 仓库，确保包含最新的 mklive.sh、Makefile、mkiso.sh 等
      # ──────────────────────────────────────────────────────────────
      - name: Checkout repository
        uses: actions/checkout@v4

      # ──────────────────────────────────────────────────────────────
      # 2) 安装宿主机所需软件：xbps-static、curl、tar、xz-utils、bubblewrap、
      #    squashfs-tools、kmod、grub2、genisoimage、mtools、make、gettext、file、bash 等
      # ──────────────────────────────────────────────────────────────
      - name: Prepare host environment
        run: |
          set -euxo pipefail

          # 安装必要的工具
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
            ca-certificates \
            curl \
            xz-utils \
            tar \
            bubblewrap \
            squashfs-tools \
            kmod \
            grub2-common \
            grub-pc-bin \
            grub-efi-amd64-bin \
            genisoimage \
            mtools \
            make \
            gettext \
            file \
            bash \
            bash-completion

          sudo rm -rf /var/lib/apt/lists/*

          # 下载并解压 xbps-static（x86_64-musl 版本），供后续 xbps-install 使用
          sudo mkdir -p /opt/xbps
          curl -L https://repo-default.voidlinux.org/static/xbps-static-latest.x86_64-musl.tar.xz \
            | sudo tar -xJ -C /opt/xbps
          sudo chmod -R a+rx /opt/xbps

          # 将 xbps-static 中的各个工具建立软链接到 /usr/local/bin 下（去掉“.static”后缀）
          for tool in xbps-install.static xbps-query.static xbps-rindex.static xbps-uhelper.static xbps-uchroot.static xbps-uunshare.static; do
            sudo ln -sf /opt/xbps/usr/bin/$tool /usr/local/bin/${tool%.static}
          done

      # ──────────────────────────────────────────────────────────────
      # 3) 在宿主机上为 chroot 准备一个空目录 VOID_ROOT，并创建 mklive 运行所需的子目录
      # ──────────────────────────────────────────────────────────────
      - name: Prepare chroot root (VOID_ROOT)
        run: |
          set -euxo pipefail

          # 定义 chroot 根目录
          export VOID_ROOT="${GITHUB_WORKSPACE}/void-root"

          # 删除旧目录并重建
          sudo rm -rf "$VOID_ROOT"
          sudo mkdir -p "$VOID_ROOT"

          # 创建 mklive 所需的目录结构
          sudo mkdir -p "$VOID_ROOT"/var/tmp
          sudo mkdir -p "$VOID_ROOT"/etc/modules-load.d
          sudo mkdir -p "$VOID_ROOT"/etc/runit/runsvdir/default
          sudo mkdir -p "$VOID_ROOT"/tmp/mklive-src

          # 确保 runner 对 /tmp/mklive-src 有写权限
          sudo chown -R runner:runner "$VOID_ROOT"/tmp/mklive-src

      # ──────────────────────────────────────────────────────────────
      # 4) 用 xbps-install 从官方仓库直接安装二进制包到 $VOID_ROOT：
      #    • 设置 XBPS_TARGET_ARCH 来指定架构
      #    • 设置 XBPS_ALLOW_UNTRUSTED=1，彻底跳过签名验证
      #    • 使用 -S 选项让 xbps-install 同步远程索引，无需本地 repo 数据
      #    • 指定 -R https://repo-default.voidlinux.org/current，让它从官方仓库拉包
      #    • 指定 -r "$VOID_ROOT"，把包安装到 chroot 里
      #    安装的包：base-system、runit、squashfs-tools、kmod，以及用户自行指定的 extra_packages
      # ──────────────────────────────────────────────────────────────
      - name: Bootstrap Void packages into chroot
        run: |
          set -euxo pipefail

          export VOID_ROOT="${GITHUB_WORKSPACE}/void-root"
          export XBPS_TARGET_ARCH="${{ inputs.arch }}"
          # ① 彻底跳过签名，避免任何导入交互
          export XBPS_ALLOW_UNTRUSTED=1

          # 默认安装的核心包
          PKG_LIST="base-system runit squashfs-tools kmod"
          if [ -n "${{ inputs.extra_packages }}" ]; then
            PKG_LIST="$PKG_LIST ${{ inputs.extra_packages }}"
          fi

          # 从官方远程仓库拉取索引并将包安装到 chroot
          sudo env XBPS_TARGET_ARCH="$XBPS_TARGET_ARCH" \
                   XBPS_ALLOW_UNTRUSTED=1 \
               xbps-install -S -y \
               -R https://repo-default.voidlinux.org/current \
               -r "$VOID_ROOT" \
               $PKG_LIST

      # ──────────────────────────────────────────────────────────────
      # 5) 将当前仓库（包含 mklive.sh、Makefile 等）拷贝到 chroot 的 /tmp/mklive-src
      # ──────────────────────────────────────────────────────────────
      - name: Copy void-mklive sources into chroot
        run: |
          set -euxo pipefail

          export VOID_ROOT="${GITHUB_WORKSPACE}/void-root"

          # 把仓库里所有文件复制到 chroot 的 /tmp/mklive-src/ 目录下
          cp -a . "$VOID_ROOT"/tmp/mklive-src/.
          sudo chown -R runner:runner "$VOID_ROOT"/tmp/mklive-src

      # ──────────────────────────────────────────────────────────────
      # 6) chroot 到 $VOID_ROOT，并在 /tmp/mklive-src 中执行 make 和 mklive.sh 生成 ISO
      #    • 计算日期码（若用户留空则取今天 UTC）
      #    • 构造 “要安装到 ISO 中的包列表” + “要启用的 runit 服务（若有）”
      #    • 调用 mklive.sh，输出到 /tmp/void-<arch>-<datecode>.iso
      #    生成后，将 ISO 从 chroot 复制回宿主机工作目录
      # ──────────────────────────────────────────────────────────────
      - name: chroot and run mklive.sh to build ISO
        run: |
          set -euxo pipefail

          export VOID_ROOT="${GITHUB_WORKSPACE}/void-root"
          export ARCH="${{ inputs.arch }}"

          # 计算日期码
          if [ -z "${{ inputs.datecode }}" ]; then
            DATECODE=$(date -u +%Y%m%d)
          else
            DATECODE="${{ inputs.datecode }}"
          fi

          # 构造 runit 服务参数（如果用户指定了 extra_services，就加 -S）
          EXTRA_SVCS="${{ inputs.extra_services }}"
          if [ -n "$EXTRA_SVCS" ]; then
            SVC_ARG="-S \"$EXTRA_SVCS\""
          else
            SVC_ARG=""
          fi

          # 直接 chroot 到 $VOID_ROOT 里执行
          sudo chroot "$VOID_ROOT" /bin/sh -eux <<'EOF'
            cd /tmp/mklive-src
            # 编译最新的 mklive.sh
            make

            # 构造要在 ISO 里安装的包列表
            PKG_STR="base-system squashfs-tools kmod"
            if [ -n "${{ inputs.extra_packages }}" ]; then
              PKG_STR="\$PKG_STR ${{ inputs.extra_packages }}"
            fi

            # 调用 mklive.sh 生成 ISO
            eval "./mklive.sh \
              -a \"$ARCH\" \
              -r https://repo-default.voidlinux.org/current \
              -p \"\$PKG_STR\" \
              $SVC_ARG \
              -o /tmp/void-\$ARCH-$DATECODE.iso"
          EOF

          # 把生成的 ISO 从 chroot 复制回 workspace 根目录
          sudo cp "$VOID_ROOT"/tmp/void-"$ARCH"-"$DATECODE".iso .
          sudo chown runner:runner void-"$ARCH"-"$DATECODE".iso

      # ──────────────────────────────────────────────────────────────
      # 7) 上传生成的 ISO 作为 artifact
      # ──────────────────────────────────────────────────────────────
      - name: Upload generated ISO
        uses: actions/upload-artifact@v4
        with:
          name: void-${{ inputs.arch }}-iso
          path: void-*.iso
