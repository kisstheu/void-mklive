# .github/workflows/build-without-container.yml
name: Build Void Live ISO (Use Official Binaries)

on:
  workflow_dispatch:
    inputs:
      arch:
        description: "目标架构 (x86_64 / x86_64-musl / aarch64 …)"
        default: "x86_64"
        required: true
        type: string
      datecode:
        description: "日期码 (YYYYMMDD，留空则自动取今天 UTC)"
        required: false
        type: string
      extra_packages:
        description: "自选额外包 (空格分隔，留空则只安装 base-system、squashfs-tools、kmod)"
        default: "xfce4 xfce4-terminal network-manager-applet dbus-elogind"
        required: false
        type: string
      extra_services:
        description: "自选要启用的 runit 服务 (空格分隔，可留空)"
        default: ""
        required: false
        type: string

jobs:
  build-iso:
    runs-on: ubuntu-latest

    steps:
      # ─────────────────────────────────────────────────────────────
      # 1) Checkout 仓库，确保包含 mklive.sh、Makefile 等
      # ─────────────────────────────────────────────────────────────
      - name: Checkout repository
        uses: actions/checkout@v4

      # ─────────────────────────────────────────────────────────────
      # 2) 在 Ubuntu Runner 上安装 mklive.sh 所需的所有宿主工具
      #
      #    - curl、tar、xz-utils         （下载并解压 xbps-static）
      #    - bubblewrap                  （xbps-uchroot 隔离依赖）
      #    - squashfs-tools、kmod        （打 squashfs）
      #    - grub2-common、grub-pc-bin、grub-efi-amd64-bin  （生成 GRUB 引导）
      #    - genisoimage、mtools         （制作 ISO 文件、刻盘工具）
      #    - make、gettext、file、gnupg 等辅助工具
      #    —— 注意：不在宿主安装 dracut，避免触发 Ubuntu 的 initramfs 更新错误
      # ─────────────────────────────────────────────────────────────
      - name: Install dependencies on ubuntu-latest
        run: |
          set -euxo pipefail

          # 更新 apt 索引
          sudo apt-get update

          # 安装所有 mklive.sh 需要的命令行工具，注意不安装宿主的 dracut
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
            ca-certificates \
            curl \
            xz-utils \
            tar \
            bubblewrap \
            squashfs-tools \
            kmod \
            grub2-common \
            grub-pc-bin \
            grub-efi-amd64-bin \
            genisoimage \
            mtools \
            make \
            gettext \
            file \
            gnupg \
            bash-completion

          # 清理 apt 缓存，节省磁盘空间
          sudo rm -rf /var/lib/apt/lists/*

          # ── 下载并解压 xbps-static（musl 版，以支持多种架构） ──
          sudo mkdir -p /opt/xbps
          curl -L https://repo-default.voidlinux.org/static/xbps-static-latest.x86_64-musl.tar.xz \
            | sudo tar -xJ -C /opt/xbps
          sudo chmod -R a+rx /opt/xbps

          # 把 xbps-static 里的可执行程序链接到 /usr/local/bin
          for tool in xbps-install.static xbps-query.static xbps-rindex.static xbps-uhelper.static xbps-uchroot.static xbps-uunshare.static; do
            sudo ln -sf /opt/xbps/usr/bin/$tool /usr/local/bin/${tool%.static}
          done

      # ─────────────────────────────────────────────────────────────
      # 3) 调用 mklive.sh，拉官方仓库中的二进制包并生成 ISO
      #
      #    -r 官方仓库地址： https://repo-default.voidlinux.org/current
      #    -p 安装包列表： base-system、squashfs-tools、kmod 以及 extra_packages
      #    -S 额外 runit 服务 (如果有)
      #    -o 输出文件名： void-<ARCH>-<DATECODE>.iso
      # ─────────────────────────────────────────────────────────────
      - name: Build ISO via mklive.sh
        run: |
          set -euxo pipefail

          # 计算 DATECODE：如果留空就取今天 UTC (YYYYMMDD)
          if [ -z "${{ inputs.datecode }}" ]; then
            DATECODE="$(date -u +%Y%m%d)"
          else
            DATECODE="${{ inputs.datecode }}"
          fi

          ARCH="${{ inputs.arch }}"
          EXTRA_PKGS="${{ inputs.extra_packages }}"
          EXTRA_SVCS="${{ inputs.extra_services }}"

          # 确保 mklive.sh 可执行
          chmod +x ./mklive.sh

          # 基本包列表： base-system、squashfs-tools、kmod
          PKG_STR="base-system squashfs-tools kmod"
          if [ -n "$EXTRA_PKGS" ]; then
            PKG_STR="$PKG_STR $EXTRA_PKGS"
          fi

          # 可选 runit 服务参数
          if [ -n "$EXTRA_SVCS" ]; then
            SVC_ARG="-S \"$EXTRA_SVCS\""
          else
            SVC_ARG=""
          fi

          # 调用 mklive.sh，从官方仓库拉二进制包并打 ISO
          eval "./mklive.sh \
            -a \"$ARCH\" \
            -r https://repo-default.voidlinux.org/current \
            -p \"$PKG_STR\" \
            $SVC_ARG \
            -o void-$ARCH-$DATECODE.iso"

      # ─────────────────────────────────────────────────────────────
      # 4) 上传生成好的 ISO
      # ─────────────────────────────────────────────────────────────
      - name: Upload generated ISO
        uses: actions/upload-artifact@v4
        with:
          name: void-${{ inputs.arch }}-iso
          path: void-*.iso
