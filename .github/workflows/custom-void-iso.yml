# .github/workflows/build-without-container.yml
name: Build Void Live ISO (Use Official Binaries Only, No mklive.sh Patch)

on:
  workflow_dispatch:
    inputs:
      arch:
        description: "目标架构 (x86_64 / x86_64-musl / aarch64 …)"
        default: "x86_64"
        required: true
        type: string
      datecode:
        description: "日期码 (YYYYMMDD，留空则自动取今天 UTC)"
        required: false
        type: string
      extra_packages:
        description: "自选额外包 (空格分隔，留空则只安装 base-system、runit、squashfs-tools、kmod)"
        default: "xfce4 xfce4-terminal network-manager-applet dbus-elogind"
        required: false
        type: string
      extra_services:
        description: "自选要启用的 runit 服务 (空格分隔，可留空)"
        default: ""
        required: false
        type: string

jobs:
  build-iso:
    runs-on: ubuntu-latest

    steps:
      # ─────────────────────────────────────────────────────────────
      # 1) Checkout 仓库，确保包含 mklive.sh、Makefile 等
      # ─────────────────────────────────────────────────────────────
      - name: Checkout repository
        uses: actions/checkout@v4

      # ─────────────────────────────────────────────────────────────
      # 2) 安装 mklive.sh 生成 ISO 所需的所有宿主包 (不安装宿主 dracut)
      #
      #    安装清单：
      #      • curl、tar、xz-utils      （下载并解压 xbps-static）
      #      • bubblewrap               （xbps-uchroot 隔离）
      #      • squashfs-tools、kmod     （制作 squashfs 根文件系统）
      #      • grub2-common、grub-pc-bin、grub-efi-amd64-bin  （配置 GRUB）
      #      • genisoimage、mtools      （制作 ISO，刻盘工具）
      #      • make、gettext、file、gnupg  等辅助工具
      #    注意：不在宿主上安装 dracut，以免触发 Ubuntu 本机的 initramfs 更新错误。
      # ─────────────────────────────────────────────────────────────
      - name: Install host dependencies
        run: |
          set -euxo pipefail

          # 更新 apt 索引
          sudo apt-get update

          # 安装所有 mklive.sh 需要的命令行工具
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
            ca-certificates \
            curl \
            xz-utils \
            tar \
            bubblewrap \
            squashfs-tools \
            kmod \
            grub2-common \
            grub-pc-bin \
            grub-efi-amd64-bin \
            genisoimage \
            mtools \
            make \
            gettext \
            file \
            gnupg \
            bash-completion

          # 清理 apt 缓存，节省磁盘空间
          sudo rm -rf /var/lib/apt/lists/*

          # ── 下载并解压 xbps-static（musl 版） ──
          sudo mkdir -p /opt/xbps
          curl -L https://repo-default.voidlinux.org/static/xbps-static-latest.x86_64-musl.tar.xz \
            | sudo tar -xJ -C /opt/xbps
          sudo chmod -R a+rx /opt/xbps

          # 链接 xbps-static 的可执行程序到 /usr/local/bin
          for tool in xbps-install.static xbps-query.static xbps-rindex.static xbps-uhelper.static xbps-uchroot.static xbps-uunshare.static; do
            sudo ln -sf /opt/xbps/usr/bin/$tool /usr/local/bin/${tool%.static}
          done

      # ─────────────────────────────────────────────────────────────
      # 3) 生成固定的 $BUILDDIR，预先在 $BUILDDIR/void-host 下创建下面这些目录：
      #
      #    预先创建目录列表：
      #      • /var/tmp
      #      • /etc/modules-load.d
      #      • /etc/runit/runsvdir/default
      #
      #    这样才能保证后续 mklive.sh 运行时：
      #      – 安装 base-system 时，需要 /etc/modules-load.d 存在才能写 dm-raid.conf
      #      – 安装 runit 时，需要 /etc/runit/runsvdir/default 存在才能打 symlink
      #      – dracut 在 chroot 中需要 /var/tmp 存放临时文件
      #
      #    【注意】这里无需修改 mklive.sh，全部在调用它之前完成目录准备。
      # ─────────────────────────────────────────────────────────────
      - name: Prepare fixed build directory
        run: |
          set -euxo pipefail

          # 定义一个固定的构建目录（mklive.sh 会使用它，而不是 mktemp）
          # 例如： $GITHUB_WORKSPACE/buildroot
          export BUILDDIR="${GITHUB_WORKSPACE}/buildroot"

          # 先删除旧的（如果有），再重新创建：
          sudo rm -rf "$BUILDDIR"
          mkdir -p "$BUILDDIR"

          # chroot 根目录会在 "$BUILDDIR/void-host"
          mkdir -p "$BUILDDIR/void-host/var/tmp"
          mkdir -p "$BUILDDIR/void-host/etc/modules-load.d"
          mkdir -p "$BUILDDIR/void-host/etc/runit/runsvdir/default"

          # 确保权限正确：
          sudo chown -R $USER:$USER "$BUILDDIR"

      # ─────────────────────────────────────────────────────────────
      # 4) 调用 mklive.sh（注意加 sudo），环境变量指定：
      #        BUILDDIR="${BUILDDIR}"
      #    这样脚本内部不会用 mktemp 创建随机目录，而是用我们提前准备好的 "$BUILDDIR"
      #
      #    同时在包列表里额外加入 runit，以确保 /etc/runit/runsvdir/default 存在
      #
      #    官方二进制仓库： https://repo-default.voidlinux.org/current
      #
      #    生成的 ISO 名称： void-<ARCH>-<DATECODE>.iso
      # ─────────────────────────────────────────────────────────────
      - name: Build ISO via mklive.sh
        run: |
          set -euxo pipefail

          # 计算 DATECODE：若用户留空，就取今天 UTC (YYYYMMDD)
          if [ -z "${{ inputs.datecode }}" ]; then
            DATECODE="$(date -u +%Y%m%d)"
          else
            DATECODE="${{ inputs.datecode }}"
          fi

          ARCH="${{ inputs.arch }}"
          EXTRA_PKGS="${{ inputs.extra_packages }}"
          EXTRA_SVCS="${{ inputs.extra_services }}"

          # 基本包列表：base-system、runit、squashfs-tools、kmod
          # “runit” 包会自动创建 /etc/runit/runsvdir/default 以及启动脚本所需的结构
          PKG_STR="base-system runit squashfs-tools kmod"
          if [ -n "$EXTRA_PKGS" ]; then
            PKG_STR="$PKG_STR $EXTRA_PKGS"
          fi

          # 可选 runit 服务参数
          if [ -n "$EXTRA_SVCS" ]; then
            SVC_ARG="-S \"$EXTRA_SVCS\""
          else
            SVC_ARG=""
          fi

          # 让 mklive.sh 使用我们固定的 BUILDDIR：
          export BUILDDIR="${GITHUB_WORKSPACE}/buildroot"

          # 确保脚本可执行
          chmod +x ./mklive.sh

          # 以 sudo 身份运行 mklive.sh：
          #   -a 指定架构
          #   -r 指定官方仓库
          #   -p 指定包列表（含 runit）
          #   -S 指定 runit 要启用的服务
          #   -o 指定输出 ISO 文件名
          sudo BUILDDIR="$BUILDDIR" ./mklive.sh \
            -a "$ARCH" \
            -r https://repo-default.voidlinux.org/current \
            -p "$PKG_STR" \
            $SVC_ARG \
            -o void-$ARCH-$DATECODE.iso

      # ─────────────────────────────────────────────────────────────
      # 5) 上传生成好的 ISO 作为 artifact
      # ─────────────────────────────────────────────────────────────
      - name: Upload generated ISO
        uses: actions/upload-artifact@v4
        with:
          name: void-${{ inputs.arch }}-iso
          path: void-*.iso
