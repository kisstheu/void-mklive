# .github/workflows/build-without-container.yml
name: Build Void Live ISO (Use Official Binaries Only, No mklive.sh Patch)

on:
  workflow_dispatch:
    inputs:
      arch:
        description: "目标架构 (x86_64 / x86_64-musl / aarch64 …)"
        default: "x86_64"
        required: true
        type: string
      datecode:
        description: "日期码 (YYYYMMDD，留空则自动取今天 UTC)"
        required: false
        type: string
      extra_packages:
        description: "自选额外包 (空格分隔，留空则只安装 base-system、runit、squashfs-tools、kmod)"
        default: "xfce4 xfce4-terminal network-manager-applet dbus-elogind"
        required: false
        type: string
      extra_services:
        description: "自选要启用的 runit 服务 (空格分隔，可留空)"
        default: ""
        required: false
        type: string

jobs:
  build-iso:
    runs-on: ubuntu-latest

    steps:
      # ─────────────────────────────────────────────────────────────
      # 1) Checkout 仓库，确保包含 mklive.sh、Makefile 等
      # ─────────────────────────────────────────────────────────────
      - name: Checkout repository
        uses: actions/checkout@v4

      # ─────────────────────────────────────────────────────────────
      # 2) 在 Ubuntu Runner 上安装 mklive.sh 所需的所有宿主工具（不安装 dracut）
      #    - curl、tar、xz-utils      （下载并解压 xbps-static）
      #    - bubblewrap               （xbps-uchroot 需要）
      #    - squashfs-tools、kmod     （打 squashfs）
      #    - grub2-common、grub-pc-bin、grub-efi-amd64-bin
      #    - genisoimage、mtools      （生成 ISO）
      #    - make、gettext、file、gnupg 等辅助工具
      #
      #    注意：不要在宿主上安装 dracut，否则会触发 Ubuntu 自己的 initramfs 更新错误。
      # ─────────────────────────────────────────────────────────────
      - name: Install host dependencies
        run: |
          set -euxo pipefail

          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
            ca-certificates \
            curl \
            xz-utils \
            tar \
            bubblewrap \
            squashfs-tools \
            kmod \
            grub2-common \
            grub-pc-bin \
            grub-efi-amd64-bin \
            genisoimage \
            mtools \
            make \
            gettext \
            file \
            gnupg \
            bash-completion

          sudo rm -rf /var/lib/apt/lists/*

          # 下载并解压 xbps-static（musl 版）
          sudo mkdir -p /opt/xbps
          curl -L https://repo-default.voidlinux.org/static/xbps-static-latest.x86_64-musl.tar.xz \
            | sudo tar -xJ -C /opt/xbps
          sudo chmod -R a+rx /opt/xbps

          # 将 xbps-static 里的命令链接到 /usr/local/bin
          for tool in xbps-install.static xbps-query.static xbps-rindex.static xbps-uhelper.static xbps-uchroot.static xbps-uunshare.static; do
            sudo ln -sf /opt/xbps/usr/bin/$tool /usr/local/bin/${tool%.static}
          done

      # ─────────────────────────────────────────────────────────────
      # 3) 定义一个固定的构建目录 $BUILDDIR，并预先在其中创建下面这些目录：
      #      • $BUILDDIR/void-host/var/tmp
      #      • $BUILDDIR/void-host/etc/modules-load.d
      #      • $BUILDDIR/void-host/etc/runit/runsvdir/default
      #
      #    mklive.sh 在后面步骤会往这些目录写东西，如果目录不存在就会报错。
      # ─────────────────────────────────────────────────────────────
      - name: Prepare fixed build directory
        run: |
          set -euxo pipefail

          # 定义 BUILDDIR，让 mklive.sh 不用 mktemp，而使用这个目录
          export BUILDDIR="${GITHUB_WORKSPACE}/buildroot"

          # 删除旧的、重建新的
          sudo rm -rf "$BUILDDIR"
          mkdir -p "$BUILDDIR"

          # 预先在 chroot 根下创建这些目录
          mkdir -p "$BUILDDIR/void-host/var/tmp"
          mkdir -p "$BUILDDIR/void-host/etc/modules-load.d"
          mkdir -p "$BUILDDIR/void-host/etc/runit/runsvdir/default"

          # 确保 $USER 拥有写权限
          sudo chown -R $USER:$USER "$BUILDDIR"

      # ─────────────────────────────────────────────────────────────
      # 4) 用 sudo + 指定 BUILDDIR 运行 mklive.sh，
      #    包列表里一定要加上 runit，确保 /etc/runit 相关目录存在。
      #
      #    • -a ARCH      指定架构
      #    • -r <repo>    指向官方仓库 https://repo-default.voidlinux.org/current
      #    • -p PKG_STR   安装 base-system、runit、squashfs-tools、kmod 以及 extra_packages
      #    • -S 服务列表  （若需要 enable runit 服务）
      #    • -o 指定输出 ISO 文件名
      # ─────────────────────────────────────────────────────────────
      - name: Build ISO via mklive.sh
        run: |
          set -euxo pipefail

          # 计算 DATECODE（留空则取今天 UTC）
          if [ -z "${{ inputs.datecode }}" ]; then
            DATECODE="$(date -u +%Y%m%d)"
          else
            DATECODE="${{ inputs.datecode }}"
          fi

          ARCH="${{ inputs.arch }}"
          EXTRA_PKGS="${{ inputs.extra_packages }}"
          EXTRA_SVCS="${{ inputs.extra_services }}"

          # 构建包列表：必装 base-system、runit、squashfs-tools、kmod
          PKG_STR="base-system runit squashfs-tools kmod"
          if [ -n "$EXTRA_PKGS" ]; then
            PKG_STR="$PKG_STR $EXTRA_PKGS"
          fi

          # 额外服务参数
          if [ -n "$EXTRA_SVCS" ]; then
            SVC_ARG="-S \"$EXTRA_SVCS\""
          else
            SVC_ARG=""
          fi

          # 让 mklive.sh 使用我们预先创建好的 BUILDDIR
          export BUILDDIR="${GITHUB_WORKSPACE}/buildroot"

          # 确保 mklive.sh 有可执行权限
          chmod +x ./mklive.sh

          # 以 sudo 身份调用
          sudo BUILDDIR="$BUILDDIR" ./mklive.sh \
            -a "$ARCH" \
            -r https://repo-default.voidlinux.org/current \
            -p "$PKG_STR" \
            $SVC_ARG \
            -o void-$ARCH-$DATECODE.iso

      # ─────────────────────────────────────────────────────────────
      # 5) 上传生成的 ISO 作为 artifact
      # ─────────────────────────────────────────────────────────────
      - name: Upload generated ISO
        uses: actions/upload-artifact@v4
        with:
          name: void-${{ inputs.arch }}-iso
          path: void-*.iso
