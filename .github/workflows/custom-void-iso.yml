# .github/workflows/build-with-official-binaries.yml
name: Build Void Live ISO (Use Official Binaries)

on:
  workflow_dispatch:
    inputs:
      arch:
        description: "目标架构 (x86_64 / x86_64-musl / aarch64 …)"
        default: "x86_64"
        required: true
        type: string
      datecode:
        description: "日期码 (YYYYMMDD，留空则自动取今天 UTC)"
        required: false
        type: string
      extra_packages:
        description: "自选额外包 (空格分隔，留空则只安装 base-system、squashfs-tools、kmod)"
        default: "xfce4 xfce4-terminal network-manager-applet dbus-elogind"
        required: false
        type: string
      extra_services:
        description: "自选要启用的 runit 服务 (空格分隔，可留空)"
        default: ""
        required: false
        type: string

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # --------------------------------------------------------
      # 1) Checkout 当前仓库（要包含 mklive.sh、Makefile，以及你需要的任何脚本）
      # --------------------------------------------------------
      - name: Checkout repository
        uses: actions/checkout@v4

      # --------------------------------------------------------
      # 2) 安装所有 mklive.sh 运行时依赖：
      #    - curl、tar、xz-utils    （用于下载并解压 xbps-static）
      #    - bubblewrap             （xbps-uchroot 会依赖它做隔离）
      #    - squashfs-tools、kmod   （用于打 squashfs）
      #    - dracut                  （用于生成 initramfs）
      #    - grub2-common、grub-pc-bin、grub-efi-amd64-bin  （用于配置 GRUB）
      #    - genisoimage、mtools    （用于烧录/刻盘工具）
      #    - make、gettext、file、gnupg 等一些辅助工具
      # --------------------------------------------------------
      - name: Install host dependencies
        run: |
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
            ca-certificates \
            curl \
            xz-utils \
            tar \
            bubblewrap \
            squashfs-tools \
            kmod \
            dracut \
            grub2-common \
            grub-pc-bin \
            grub-efi-amd64-bin \
            genisoimage \
            mtools \
            make \
            gettext \
            file \
            gnupg \
            bash-completion \
            # 清理 apt 缓存，节省空间
            && sudo rm -rf /var/lib/apt/lists/*

      # --------------------------------------------------------
      # 3) 下载并安装 xbps-static（musl 版，以支持所有架构）
      #    这会在 /opt/xbps 下生成 xbps-install、xbps-query、xbps-uchroot 等静态可执行文件
      #    接着用 ln -s 将它们链接到 /usr/local/bin，方便在后续调用 mklive.sh 时直接找到
      # --------------------------------------------------------
      - name: Download and install xbps-static
        run: |
          # 创建安装目录
          sudo mkdir -p /opt/xbps
          # 以 x86_64-musl 为例；如果 arch= aarch64-musl，请把链接换成对应架构。
          curl -L https://repo-default.voidlinux.org/static/xbps-static-latest.x86_64-musl.tar.xz \
            | sudo tar -xJ -C /opt/xbps
          # 给解压后的文件加上执行权限
          sudo chmod -R a+rx /opt/xbps
          # 软链接到 /usr/local/bin，让 xbps-install、xbps-query、xbps-uchroot 直接在 PATH 可用
          for tool in xbps-install.static xbps-query.static xbps-rindex.static xbps-uhelper.static xbps-uchroot.static xbps-uunshare.static; do
            sudo ln -sf /opt/xbps/usr/bin/$tool /usr/local/bin/${tool%.static}
          done

      # --------------------------------------------------------
      # 4) 计算 DATECODE、拼装包列表与服务列表，然后直接调用 mklive.sh
      #
      #    -r 参数指向官方线上仓库 https://repo-default.voidlinux.org/current 
      #    mklive.sh 会自动在临时挂载环境中运行 xbps-install，把下列包全部从这一官方仓库拉下来：
      #      · base-system
      #      · squashfs-tools
      #      · kmod
      #      · （以及 extra_packages 中指定的其他包）
      #    它还会自动调用 dracut、mksquashfs、grub-mkconfig 等步骤，最后产出一个可启动 ISO
      # --------------------------------------------------------
      - name: Build ISO via Official Void Binaries
        run: |
          set -euxo pipefail

          # 计算 DATECODE：如果用户未输入，就取今天 UTC 格式 YYYYMMDD
          if [ -z "${{ inputs.datecode }}" ]; then
            DATECODE="$(date -u +%Y%m%d)"
          else
            DATECODE="${{ inputs.datecode }}"
          fi

          ARCH="${{ inputs.arch }}"
          EXTRA_PKGS="${{ inputs.extra_packages }}"
          EXTRA_SVCS="${{ inputs.extra_services }}"

          # 确保 mklive.sh 可执行
          chmod +x ./mklive.sh

          # 基本要安装的包
          PKG_STR="base-system squashfs-tools kmod"
          if [ -n "$EXTRA_PKGS" ]; then
            PKG_STR="$PKG_STR $EXTRA_PKGS"
          fi

          # 如果指定了额外 runit 服务，就生成 -S 参数
          if [ -n "$EXTRA_SVCS" ]; then
            SVC_ARG="-S \"$EXTRA_SVCS\""
          else
            SVC_ARG=""
          fi

          # 最关键的一行：mklive.sh 从官方仓库拉取二进制包
          eval "./mklive.sh \
            -a \"$ARCH\" \
            -r https://repo-default.voidlinux.org/current \
            -p \"$PKG_STR\" \
            $SVC_ARG \
            -o void-$ARCH-$DATECODE.iso"

      # --------------------------------------------------------
      # 5) 上传最终生成的 ISO
      # --------------------------------------------------------
      - name: Upload generated ISO
        uses: actions/upload-artifact@v4
        with:
          name: void-${{ inputs.arch }}-iso
          path: void-*.iso
