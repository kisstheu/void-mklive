name: Custom Void ISO (using mkiso.sh)

on:
  workflow_dispatch:
    inputs:
      arch:
        description: "目标架构 (x86_64 / x86_64-musl …)"
        default: "x86_64"
        required: true
        type: string
      datecode:
        description: "可选日期码 (默认为今天 UTC)"
        required: false
        type: string
      flavor:
        description: "预置 Live ISO flavor (base/xfce/…)"
        default: "xfce"
        required: true
        type: string
      extra_packages:
        description: "额外要安装的包 (空格分隔，可留空)"
        default: ""
        required: false
        type: string
      extra_services:
        description: "要启用的 runit 服务 (空格分隔，可留空)"
        default: ""
        required: false
        type: string

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1) 拉取你 fork 的 void-mklive 源码
      - uses: actions/checkout@v4

      # 2) 构建一个 Ubuntu 容器做宿主环境（只要能跑 mkiso.sh 所需的工具）
      - name: Build builder image
        run: |
          cat > Dockerfile <<'EOF'
          FROM ubuntu:22.04
          ENV DEBIAN_FRONTEND=noninteractive

          RUN apt-get update && \
              apt-get install -y --no-install-recommends \
                  ca-certificates curl git xz-utils lzop dosfstools e2fsprogs \
                  squashfs-tools kmod util-linux genisoimage mtools make dracut && \
              rm -rf /var/lib/apt/lists/*

          # xbps-static (musl) for xbps-install inside container (mkiso.sh 里会用到)
          RUN curl -LO https://repo-default.voidlinux.org/static/xbps-static-latest.x86_64-musl.tar.xz && \
              mkdir -p /opt/xbps && \
              tar -xf xbps-static-latest.x86_64-musl.tar.xz -C /opt/xbps && \
              chmod -R a+rx /opt/xbps

          ENV PATH=/opt/xbps/usr/bin:$PATH
          EOF

          docker build -t my-void-builder - < Dockerfile

      # 3) 在容器里调用 mkiso.sh，传入 flavor，并用真正的数组展开 -p/-S 参数
      - name: Build ISO with mkiso.sh
        run: |
          set -e
          # 计算日期码：如果没有输入，就用今天 UTC
          if [ -z "${{ inputs.datecode }}" ]; then
            DATECODE=$(date -u +%Y%m%d)
          else
            DATECODE=${{ inputs.datecode }}
          fi

          ARCH="${{ inputs.arch }}"
          FLAVOR="${{ inputs.flavor }}"
          EXTRA_PKGS="${{ inputs.extra_packages }}"
          EXTRA_SVCS="${{ inputs.extra_services }}"

          docker run --rm --privileged \
            -e DATECODE="$DATECODE" \
            -e ARCH="$ARCH" \
            -e FLAVOR="$FLAVOR" \
            -e EXTRA_PKGS="$EXTRA_PKGS" \
            -e EXTRA_SVCS="$EXTRA_SVCS" \
            -v "$PWD":/workspace \
            -w /workspace \
            my-void-builder \
            bash -euxo pipefail -c '
              # 确保本地 mkiso.sh 最新
              make

              # 把要传给 mklive.sh 的包列表做成数组，必须把 squashfs-tools 与 kmod 放最前
              read -r -a USER_PKGS <<< "$EXTRA_PKGS"
              PKG_LIST=( squashfs-tools kmod "${USER_PKGS[@]}" )

              # 把要启用的服务做成数组（如果输入为空，则留空数组）
              if [ -n "$EXTRA_SVCS" ]; then
                read -r -a SVC_LIST <<< "$EXTRA_SVCS"
              else
                SVC_LIST=()
              fi

              # 组装 mkiso.sh 参数：-a -b -d -r -- (转发给 mklive.sh)
              ARGS=( "./mkiso.sh" "-a" "$ARCH" "-b" "$FLAVOR" "-d" "$DATECODE" "-r" "https://repo-default.voidlinux.org/current" "--" )

              # 把数组 PKG_LIST 展开为 -p <each>
              ARGS+=( "-p" "${PKG_LIST[@]}" )

              # 如果有服务要启用，就加 -S <each>
              if [ "${#SVC_LIST[@]}" -gt 0 ]; then
                ARGS+=( "-S" "${SVC_LIST[@]}" )
              fi

              # 调用 mkiso.sh
              "${ARGS[@]}"
            '

      # 4) 上传生成的 ISO
      - uses: actions/upload-artifact@v4
        with:
          name: void-${{ inputs.arch }}-${{ inputs.flavor }}-iso
          path: void-*-*-*.iso
