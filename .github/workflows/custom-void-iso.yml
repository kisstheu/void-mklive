# Dockerfile (container/Dockerfile)
```dockerfile
FROM ubuntu:22.04

ENV DEBIAN_FRONTEND=noninteractive

# ── install base toolchain & deps ───────────────────────────
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        ca-certificates curl git xz-utils lzop dosfstools e2fsprogs \
        squashfs-tools binutils build-essential gawk texinfo \
        bubblewrap sudo bzip2 unzip libarchive-tools libtool autopoint gettext && \
    rm -rf /var/lib/apt/lists/*

# ── install xbps‑static (musl build) ─────────────────────────
RUN curl -LO https://repo-default.voidlinux.org/static/xbps-static-latest.x86_64-musl.tar.xz && \
    mkdir -p /opt/xbps && \
    bsdtar -xpf xbps-static-latest.x86_64-musl.tar.xz -C /opt/xbps && \
    chmod -R a+rx /opt/xbps

ENV PATH=/opt/xbps/usr/bin:$PATH

# ── make bwrap set‑uid root so unprivileged user can use it ──
RUN chmod u+s /usr/bin/bwrap

# ── add non‑root builder user (no sudo needed) ───────────────
RUN useradd -m builder
```

---

# GitHub Actions workflow (.github/workflows/build-iso.yml)
```yaml
name: Build Void ISO From Scratch

on:
  workflow_dispatch:
    inputs:
      datecode:
        description: "Optional datecode (defaults to today UTC)"
        required: false
        type: string

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Build custom builder image
        run: |
          docker build -t void-builder:latest container

      - name: Run build inside container
        run: |
          set -e
          if [ -z "${{ inputs.datecode }}" ]; then
            DATECODE=$(date -u +%Y%m%d)
          else
            DATECODE=${{ inputs.datecode }}
          fi

          docker run --rm --privileged \
            -e DATECODE="$DATE" \
            -e ARCH="${{ inputs.arch }}" \
            -e EXTRA_PKGS="${{ inputs.packages }}" \
            -e EXTRA_SVCS="${{ inputs.services }}" \
            -v "$PWD":/workspace \
            -w /workspace \
            my-void-builder \
            bash -euxo pipefail -c '
              # prepare package/service lists
              BASE_PKGS="squashfs-tools kmod"
              if [ -n "$EXTRA_PKGS" ]; then
                PKGS="$BASE_PKGS $EXTRA_PKGS"
              else
                PKGS="$BASE_PKGS"
              fi
              if [ -n "$EXTRA_SVCS" ]; then
                SRV_OPT="-S \"$EXTRA_SVCS\""
              else
                SRV_OPT=""
              fi

              # build mklive (idempotent)
              make

              # generate ISO using official repo and selected packages/services
              eval ./mklive.sh \
                -a "$ARCH" \
                -r https://repo-default.voidlinux.org/current \
                -p "$PKGS" \
                $SRV_OPT \
                -o "void-${ARCH}-custom-${DATECODE}.iso"
            ' '
              set -e
              export PATH=/opt/xbps/usr/bin:$PATH

              # ── build base‑system + tools as non‑root ─────────────────
              chown -R builder:builder /workspace
              su builder -c "\
                export PATH=/opt/xbps/usr/bin:$PATH; \
                git clone --depth 1 https://github.com/void-linux/void-packages.git; \
                cd void-packages; \
                echo XBPS_CHROOT_CMD=bwrap >> etc/conf; \
                ./xbps-src binary-bootstrap; \
                ./xbps-src -N pkg base-system kmod squashfs-tools; \
                xbps-rindex -a hostdir/binpkgs/*.xbps; \
              "

              # ── install kmod & squashfs-tools into container runtime ──
              xbps-install -y -R void-packages/hostdir/binpkgs kmod squashfs-tools

              # ── build ISO as root ─────────────────────────────────────
              make
              ./mklive.sh -a x86_64 \
                -r void-packages/hostdir/binpkgs \
                -o void-x86_64-${DATECODE}.iso
            '

      - uses: actions/upload-artifact@v4
        with:
          name: void-x86_64-${{ inputs.datecode || 'latest' }}
          path: void-x86_64-*.iso
```
