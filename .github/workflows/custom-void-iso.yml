name: Custom Void ISO with official repo

on:
  workflow_dispatch:
    inputs:
      arch:
        description: "Target arch (x86_64 / x86_64-musl …)"
        default: "x86_64"
        required: true
        type: string
      datecode:
        description: "Optional datecode (defaults to today UTC)"
        required: false
        type: string
      packages:
        description: "Extra packages to install (space-separated)"
        default: "xfce4 xfce4-terminal network-manager-applet dbus-elogind"
        required: false
        type: string
      services:
        description: "runit services to enable (space-separated)"
        required: false
        type: string

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1) 拉取 fork 的 void-mklive 源码
      - uses: actions/checkout@v4

      # 2) 构建自定义 Ubuntu 容器（包含 mklive 所需的宿主工具）
      - name: Build builder image
        run: |
          cat > Dockerfile <<'EOF'
          FROM ubuntu:22.04
          ENV DEBIAN_FRONTEND=noninteractive
          RUN apt-get update && \
              apt-get install -y --no-install-recommends \
                  ca-certificates curl git xz-utils lzop dosfstools e2fsprogs \
                  squashfs-tools kmod util-linux genisoimage mtools make && \
              rm -rf /var/lib/apt/lists/*

          # xbps-static (musl) for xbps-install inside container
          RUN curl -LO https://repo-default.voidlinux.org/static/xbps-static-latest.x86_64-musl.tar.xz && \
              mkdir -p /opt/xbps && \
              tar -xf xbps-static-latest.x86_64-musl.tar.xz -C /opt/xbps && \
              chmod -R a+rx /opt/xbps
          ENV PATH=/opt/xbps/usr/bin:$PATH
          EOF
          docker build -t my-void-builder - < Dockerfile

      # 3) 在容器里调用 mklive.sh，手动传包/服务
      - name: Build ISO
        run: |
          set -e
          # 生成日期码
          if [ -z "${{ inputs.datecode }}" ]; then
            DATE=$(date -u +%Y%m%d)
          else
            DATE=${{ inputs.datecode }}
          fi

          ARCH="${{ inputs.arch }}"
          EXTRA_PKGS="${{ inputs.packages }}"
          EXTRA_SVCS="${{ inputs.services }}"

          docker run --rm --privileged \
            -e DATECODE="$DATE" \
            -e ARCH="$ARCH" \
            -e EXTRA_PKGS="$EXTRA_PKGS" \
            -e EXTRA_SVCS="$EXTRA_SVCS" \
            -v "$PWD":/workspace \
            -w /workspace \
            my-void-builder \
            bash -euxo pipefail -c '
              # 编译 mklive 本身（若已编译会跳过）
              make

              # 构建 -p 字符串，确保 squashfs-tools 始终在最前
              PKG_STR="squashfs-tools kmod"
              if [ -n "$EXTRA_PKGS" ]; then
                PKG_STR="$PKG_STR $EXTRA_PKGS"
              fi

              # 构建 -S 部分
              if [ -n "$EXTRA_SVCS" ]; then
                SRV_ARG="-S \"$EXTRA_SVCS\""
              else
                SRV_ARG=""
              fi

              # 调用 mklive.sh：直接传一个带空格的字符串给 -p
              eval "./mklive.sh \
                -a \"$ARCH\" \
                -r https://repo-default.voidlinux.org/current \
                -p \"$PKG_STR\" \
                $SRV_ARG \
                -o \"void-$ARCH-custom-$DATECODE.iso\""
            '

      # 4) 上传生成的 ISO
      - uses: actions/upload-artifact@v4
        with:
          name: void-${{ inputs.arch }}-custom-iso
          path: void-*-custom-*.iso
