name: Build Void Live ISOs

on:
  workflow_dispatch:
    inputs:
      datecode:
        description: "Override datecode for images (YYYYMMDD)"
        required: false
        type: string
      live_archs:
        description: "Architectures to build live ISOs for"
        default: "x86_64 x86_64-musl i686 aarch64 aarch64-musl asahi asahi-musl"
        required: false
        type: string
      live_flavors:
        description: "Flavors to build live ISOs for"
        default: "base xfce"
        required: false
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  prepare:
    name: Prepare Environment
    runs-on: ubuntu-latest
    outputs:
      datecode: ${{ steps.prep.outputs.datecode }}
      mirror: ${{ steps.prep.outputs.mirror }}
      live_archs: ${{ steps.prep.outputs.live_archs }}
      live_flavors: ${{ steps.prep.outputs.live_flavors }}

    steps:
      - name: Prepare datecode & mirror & matrices
        id: prep
        run: |
          # 如果用户没传 datecode，就用今天 UTC（YYYYMMDD）
          if [ -z "${{ inputs.datecode }}" ]; then
            echo "datecode=$(date -u +%Y%m%d)" >> "$GITHUB_OUTPUT"
          else
            echo "datecode=${{ inputs.datecode }}" >> "$GITHUB_OUTPUT"
          fi

          # Live ISO 源仓库
          echo "mirror=https://repo-ci.voidlinux.org/current" >> "$GITHUB_OUTPUT"

          # 把空格分隔的字符串转换成 JSON 数组
          jsonify() {
            sed 's/\s\+/ /g' | jq -Rrc 'split(" ")'
          }

          echo "live_archs=$(echo "${{ inputs.live_archs }}" | jsonify)" >> "$GITHUB_OUTPUT"
          echo "live_flavors=$(echo "${{ inputs.live_flavors }}" | jsonify)" >> "$GITHUB_OUTPUT"

  build-live-isos:
    name: Build Live ISOs
    runs-on: ubuntu-latest
    needs: prepare

    # 从 prepare 输出里读取要循环的矩阵值
    strategy:
      matrix:
        arch: ${{ fromJson(needs.prepare.outputs.live_archs) }}
        flavor: ${{ fromJson(needs.prepare.outputs.live_flavors) }}

    # 直接使用官方已经发布好的 void-mklive 容器
    container:
      image: "ghcr.io/void-linux/void-mklive:20250116R1"
      options: --privileged
      volumes:
        - /dev:/dev
      env:
        # 确保 PATH 包含必要位置
        PATH: "/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/sbin:/usr/local/bin:/tmp/bin"

    env:
      MKLIVE_REV: "${{ needs.prepare.outputs.datecode }}"  # 传给容器以便在 mklive.sh 中引用

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install xbps inside container
        shell: sh
        run: |
          # 更新容器内的 xbps 并升级所有包（确保用的是最新版本）
          xbps-install -Syu xbps && xbps-install -yu

      - name: Build Live ISO (arch=${{ matrix.arch }}, flavor=${{ matrix.flavor }})
        shell: bash
        run: |
          set -euxo pipefail

          # 调用 make / mklive.sh 生成指定 arch/flavor 的 Live ISO
          make live-iso-all-print live-iso-all \
            SUDO= \
            REPOSITORY="${{ needs.prepare.outputs.mirror }}" \
            DATECODE="${{ needs.prepare.outputs.datecode }}" \
            LIVE_ARCHS="${{ matrix.arch }}" \
            LIVE_FLAVORS="${{ matrix.flavor }}"

      - name: Prepare artifacts for upload
        run: |
          # 将 distdir-<datecode> 下的所有文件打包上交
          make dist DATECODE="${{ needs.prepare.outputs.datecode }}"

      - name: Upload ISO artifacts
        uses: actions/upload-artifact@v4
        with:
          name: void-iso-${{ matrix.arch }}-${{ matrix.flavor }}-${{ needs.prepare.outputs.datecode }}
          path: |
            distdir-${{ needs.prepare.outputs.datecode }}/*
          if-no-files-found: error
