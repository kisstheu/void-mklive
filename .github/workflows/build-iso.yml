name: Build Void ISO From Scratch

on:
  workflow_dispatch:
    inputs:
      datecode:
        description: "Optional datecode (defaults to today UTC)"
        required: false
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 0) 取仓库代码（fork 的 void-mklive）
      - uses: actions/checkout@v4

      # 1) 构建自定义容器镜像
      - name: Build custom builder image
        run: |
          docker build -t void-builder:latest container

      # 2) 在容器里整套流程：bootstrap → base-system → mklive
      - name: Run build inside container
        run: |
          set -e
          # 生成 DATECODE
          if [ -z "${{ inputs.datecode }}" ]; then
            DATECODE=$(date -u +%Y%m%d)
          else
            DATECODE=${{ inputs.datecode }}
          fi

          docker run --rm --privileged \
            -e DATECODE="$DATECODE" \
            -v "$PWD":/workspace \
            -w /workspace \
            void-builder:latest bash -c '
              set -e

              # (a) 让 builder 拥有 workspace
              chown -R builder:builder /workspace

              # (b) builder: clone void-packages (浅克隆) + bootstrap + base-system
              su builder -c "
                git clone --depth 1 https://github.com/void-linux/void-packages.git
                cd void-packages
                echo XBPS_CHROOT_CMD=bwrap >> etc/conf
                ./xbps-src binary-bootstrap
                ./xbps-src -N pkg base-system
                xbps-rindex -a hostdir/binpkgs/*.xbps
              "

              # (c) root: 编译 mklive 并生成 ISO
              make                    # build mklive from current repo sources
              ./mklive.sh -a x86_64 \
                -r /workspace/void-packages/hostdir/binpkgs \
                -o /workspace/void-x86_64-${DATECODE}.iso
            '

      # 3) 上传产物
      - name: Upload ISO
        uses: actions/upload-artifact@v4
        with:
          name: void-x86_64-${{ inputs.datecode || '' }}
          path: void-x86_64-*.iso
