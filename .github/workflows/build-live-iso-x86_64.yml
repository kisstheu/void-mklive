name: Build Void x86_64 Live ISOs

on:
  workflow_dispatch:
    inputs:
      live_flavors:
        description: "Flavors to build live ISOs for"
        default: "base xfce"
        required: false
        type: string

jobs:
  prepare:
    name: Prepare Metadata
    runs-on: ubuntu-latest
    outputs:
      datecode: ${{ steps.get_datecode.outputs.datecode }}
      live_flavors: ${{ steps.parse_flavors.outputs.live_flavors }}
      mirror: ${{ steps.set_mirror.outputs.mirror }}
    steps:
      - name: Derive datecode (UTC YYYYMMDD)
        id: get_datecode
        run: |
          echo "datecode=$(date -u +%Y%m%d)" >>"$GITHUB_OUTPUT"

      - name: Set official mirror
        id: set_mirror
        run: |
          echo "mirror=https://repo-ci.voidlinux.org/current" >>"$GITHUB_OUTPUT"

      - name: Parse live_flavors into JSON array
        id: parse_flavors
        run: |
          flavors="${{ github.event.inputs.live_flavors }}"
          if [ -z "$flavors" ]; then
            flavors="base xfce"
          fi
          json_arr=$(printf '%s' "$flavors" \
            | jq -R -s -c 'split("\\s+")')
          echo "live_flavors=$json_arr" >>"$GITHUB_OUTPUT"

  build:
    name: Build Container & Live ISO
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ["x86_64"]
        flavor: ${{ fromJson(needs.prepare.outputs.live_flavors) }}
    env:
      REPOSITORY: ${{ needs.prepare.outputs.mirror }}
      DATECODE:   ${{ needs.prepare.outputs.datecode }}

    steps:
      # 1) 签出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2) 本地构建 void-glibc-full 镜像
      - name: Build void-glibc-full image
        run: |
          docker build . \
            -f Containerfile \
            -t void-glibc-full:latest

      # 3) 用刚构建的本地镜像来跑 mkliveiso
      - name: Build Live ISO (arch=${{ matrix.arch }}, flavor=${{ matrix.flavor }})
        run: |
          docker run --rm --privileged \
            -v /dev:/dev \
            -v "${{ github.workspace }}:/workspace" \
            -w /workspace \
            void-glibc-full:latest \
            make live-iso-all-print live-iso-all \
              SUDO= \
              REPOSITORY="${REPOSITORY}" \
              DATECODE="${DATECODE}" \
              LIVE_ARCHS="${{ matrix.arch }}" \
              LIVE_FLAVORS="${{ matrix.flavor }}"

      # 4) 打包并上传 ISO
      - name: Package artifacts
        run: make dist DATECODE="${DATECODE}"

      - name: Upload ISO artifacts
        uses: actions/upload-artifact@v4
        with:
          name: void-iso-${{ matrix.arch }}-${{ matrix.flavor }}-${{ needs.prepare.outputs.datecode }}Add commentMore actions
          path: distdir-${{ needs.prepare.outputs.datecode }}/*
          if-no-files-found: error*
